openapi: 3.1.0
info:
  title: Strava GPT Backend
  version: "1.0.0"
servers:
  - url: https://stravagptfaby.vercel.app

tags:
  - name: oauth
    description: Flux OAuth via ChatGPT comme callback (OpenAI Redirect)
  - name: data
    description: Lecture des données liées à un user_id

paths:
  /api/oauth/openai-authorize:
    get:
      tags: [oauth]
      operationId: openaiAuthorize
      summary: Prépare la redirection vers Strava en réutilisant le state fourni par ChatGPT
      description: >
        Proxy d’autorisation exigé par le Builder : réexpédie tel quel le `state`
        de ChatGPT et utilise `redirect_uri={{tool.redirect_uri}}` (callback ChatGPT).
        **Important** : ne pas demander `redirect_uri` à l’utilisateur ; il vient du Builder.
      parameters:
        - in: query
          name: redirect_uri
          required: true
          schema: { type: string, format: uri }
          description: URL de callback ChatGPT (variable du Builder).
        - in: query
          name: user_id
          required: false
          schema: { type: string }
          description: Optionnel (non requis en Option B).
      responses:
        "302":
          description: Redirection vers https://www.strava.com/oauth/authorize
        "400":
          description: Paramètre manquant
      x-openai-isConsequential: false

  /api/oauth/token-openai:
    post:
      tags: [oauth]
      operationId: openaiToken
      summary: Échange le code contre des tokens Strava (proxy backend) et crée le mapping (Option B)
      description: >
        Reçoit du Builder `code` et `redirect_uri` (callback ChatGPT). Échange chez Strava
        en réutilisant exactement ce `redirect_uri`, stocke les vrais tokens côté serveur,
        et si `user_id` est fourni, crée le lien `user_id ↔ athlete_id`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code, redirect_uri]
              properties:
                code: { type: string }
                redirect_uri: { type: string, format: uri }
                user_id:
                  type: string
                  description: Optionnel — si présent, le backend lie user_id ↔ athlete_id.
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [code, redirect_uri]
              properties:
                code: { type: string }
                redirect_uri: { type: string, format: uri }
                user_id:
                  type: string
                  description: Optionnel — si présent, le backend lie user_id ↔ athlete_id.
      responses:
        "200":
          description: OK — payload conforme aux attentes OAuth du Builder + infos utiles
          content:
            application/json:
              schema:
                type: object
                properties:
                  # Champs OAuth "standards" pour satisfaire le Builder (jeton opaque non sensible)
                  access_token: { type: string, example: tool-118127304-xyz123 }
                  token_type: { type: string, example: Bearer }
                  expires_in: { type: integer, example: 3600 }
                  scope: { type: string, example: strava-proxy }
                  # Champs applicatifs
                  ok: { type: boolean, example: true }
                  athlete_id: { type: integer, example: 118127304 }
                  expires_at: { type: integer, example: 1757565814 }
                  linked: { type: boolean, example: true }
        "400":
          description: code/redirect_uri manquants
        "502":
          description: Erreur renvoyée par le provider (Strava) lors de l’échange
      x-openai-isConsequential: true

  /api/link:
    post:
      tags: [oauth]
      operationId: linkUserAthlete
      summary: (Optionnel) Lie un user_id GPT à l’athlete_id Strava
      description: >
        Utile uniquement si vous n’avez pas passé user_id à la Token URL.
        En Option B, ce endpoint n’est pas nécessaire si user_id est transmis à /api/oauth/token-openai.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, athlete_id]
              properties:
                user_id: { type: string }
                athlete_id: { type: integer }
      responses:
        "200":
          description: Mapping créé
      x-openai-isConsequential: true

  /api/athlete:
    get:
      tags: [data]
      operationId: getAthlete
      summary: Récupère le profil athlète lié à un user_id
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Profil athlète
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  data:
                    type: object
                    additionalProperties: true
        "404":
          description: Aucun athlète lié
        "500":
          description: Erreur serveur
      x-openai-isConsequential: false

  /api/activities:
    get:
      tags: [data]
      operationId: listActivities
      summary: Liste les activités récentes
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: days
          required: false
          schema: { type: integer, minimum: 1, maximum: 365, default: 28 }
      responses:
        "200":
          description: Liste d’activités
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  data:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        "404": { description: Aucun athlète lié }
        "500": { description: Erreur serveur }
      x-openai-isConsequential: false

  /api/activities/{id}:
    get:
      tags: [data]
      operationId: getActivity
      summary: Détail d’une activité
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: user_id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Activité détaillée
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  data:
                    type: object
                    additionalProperties: true
        "404": { description: Aucun athlète lié }
        "500": { description: Erreur serveur }
      x-openai-isConsequential: false
